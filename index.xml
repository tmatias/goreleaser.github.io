<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GoReleaser</title>
    <link>https://goreleaser.com/</link>
    <description>Recent content on GoReleaser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Made with ❤️ by GoReleaser contributors.</copyright>
    
	<atom:link href="https://goreleaser.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction</title>
      <link>https://goreleaser.com/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/introduction/</guid>
      <description>GoReleaser is a release automation tool for Go projects, the goal is to simplify the build, release and publish steps while providing variant customization options for all steps.
GoReleaser is built for CI tools; you only need to download and execute it in your build script. You can customize your release process by creating a .goreleaser.yml file.
The idea started with a simple shell script, but it quickly became more complex and I also wanted to publish binaries via Homebrew taps, which would have made the script even more hacky, so I let go of that and rewrote the whole thing in Go.</description>
    </item>
    
    <item>
      <title>Project Name</title>
      <link>https://goreleaser.com/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/project/</guid>
      <description>The project name is used in the name of the Brew formula, archives, etc. If none is given, it will be inferred from the name of the Git project.
# .goreleaser.yml project_name: myproject</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://goreleaser.com/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/quick-start/</guid>
      <description>In this example we will build, archive and release a Go project.
Create a GitHub repository and add a single main package:
// main.go package main func main() { println(&amp;#34;Ba dum, tss!&amp;#34;) } Run goreleaser init to create an example .goreleaser.yaml file:
$ goreleaser init • Generating .goreleaser.yml file • config created; please edit accordingly to your needs file=.goreleaser.yml The generated config file will look like this:
# This is an example goreleaser.</description>
    </item>
    
    <item>
      <title>Semantic Versioning</title>
      <link>https://goreleaser.com/semver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/semver/</guid>
      <description>GoReleaser enforces semantic versioning and will error on non compliant tags.
Your tag should be a valid semantic version. If it is not, GoReleaser will error.
The v prefix is not mandatory. You can check the templating documentation to see how to use the tag or each part of the semantic version in name templates.</description>
    </item>
    
    <item>
      <title>Environment</title>
      <link>https://goreleaser.com/environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/environment/</guid>
      <description>GitHub Token GoReleaser requires a GitHub API token with the repo scope selected to deploy the artifacts to GitHub. You can create one here.
This token should be added to the environment variables as GITHUB_TOKEN. Here is how to do it with Travis CI: Defining Variables in Repository Settings.
Alternatively, you can provide the GitHub token in a file. GoReleaser will check ~/.config/goreleaser/github_token by default, you can change that in the .</description>
    </item>
    
    <item>
      <title>Global Hooks</title>
      <link>https://goreleaser.com/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/hooks/</guid>
      <description>Some builds may need pre-build steps before building, e.g. go generate. The before section allows for global hooks which will be executed before the build is started.
The configuration is very simple, here is a complete example:
# .goreleaser.yml before: hooks: - make clean - go generate ./... If any of the hooks fails the build process is aborted.
It is important to note that you can&amp;rsquo;t have &amp;ldquo;complex&amp;rdquo; commands, like bash -c &amp;quot;echo foo bar&amp;quot; or foo | bar or anything like that.</description>
    </item>
    
    <item>
      <title>Name Templates</title>
      <link>https://goreleaser.com/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/templates/</guid>
      <description>Several fields in GoReleaser&amp;rsquo;s config file support templating.
Those fields are often suffixed with _template, but sometimes they may not be. The documentation of each section should explicit in which fields templating is available.
On fields that support templating, this fields are always available:
   Key Description     .ProjectName the project name   .Version the version being released (v prefix stripped)   .Tag the current git tag   .</description>
    </item>
    
    <item>
      <title>Builds</title>
      <link>https://goreleaser.com/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/build/</guid>
      <description>Builds can be customized in multiple ways. You can specify for which GOOS, GOARCH and GOARM binaries are built (goreleaser will generate a matrix of all combinations), and you can changed the name of the binary, flags, environment variables, hooks and etc.
Here is a commented builds section with all fields specified:
# .goreleaser.yml builds: # You can have multiple builds defined as a yaml list - # Path to main.</description>
    </item>
    
    <item>
      <title>Customization</title>
      <link>https://goreleaser.com/customization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/customization/</guid>
      <description>GoReleaser provides multiple customizations via the .goreleaser.yml file.
You can generate it by running goreleaser init or start from scratch. The defaults are sensible and fit for most projects.</description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://goreleaser.com/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/archive/</guid>
      <description>The binaries built will be archived together with the README and LICENSE files into a tar.gz file. In the archive section you can customize the archive name, additional files, and format.
Here is a commented archive section with all fields specified:
# .goreleaser.yml archive: # Archive name template. # Defaults: # - if format is `tar.gz` or `zip`: # - `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .</description>
    </item>
    
    <item>
      <title>Checksum</title>
      <link>https://goreleaser.com/checksum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/checksum/</guid>
      <description>GoReleaser generates a project_1.0.0_checksums.txt file and uploads it with the release, so your users can validate if the downloaded files are correct.
The checksum section allows customizations of the filename:
# .goreleaser.yml checksum: # You can change the name of the checksums file. # Default is `{{ .ProjectName }}_{{ .Version }}_checksums.txt`. name_template: &amp;#34;{{ .ProjectName }}_checksums.txt&amp;#34;  Learn more about the name template engine.
 </description>
    </item>
    
    <item>
      <title>Signing</title>
      <link>https://goreleaser.com/sign/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/sign/</guid>
      <description>GoReleaser can sign some or all of the generated artifacts. Signing ensures that the artifacts have been generated by yourself and your users can verify that by comparing the generated signature with your public signing key.
Signing works in combination with checksum files and it is generally sufficient to sign the checksum files only.
The default is configured to create a detached signature for the checksum files with GnuPG and your default key.</description>
    </item>
    
    <item>
      <title>Snapshots</title>
      <link>https://goreleaser.com/snapshots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/snapshots/</guid>
      <description>Sometimes we want to generate a full build of our project, but neither want to validate anything nor upload it to anywhere. GoReleaser supports this with the --snapshot flag and also with the snapshot customization section:
# .goreleaser.yml snapshot: # Allows you to change the name of the generated snapshot # Default is `SNAPSHOT-{{.Commit}}`. name_template: SNAPSHOT-{{.Commit}}  Learn more about the name template engine.
 </description>
    </item>
    
    <item>
      <title>NFPM</title>
      <link>https://goreleaser.com/nfpm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/nfpm/</guid>
      <description>GoReleaser can be wired to nfpm to generate and publish .deb and .rpm packages.
Available options:
# .goreleaser.yml nfpm: # You can change the name of the package. # Default: `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}` name_template: &amp;#34;{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}&amp;#34; # Replacements for GOOS and GOARCH in the package name. # Keys should be valid GOOSs or GOARCHs.</description>
    </item>
    
    <item>
      <title>Snapcraft</title>
      <link>https://goreleaser.com/snapcraft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/snapcraft/</guid>
      <description>GoReleaser can also generate snap packages. Snaps are a new packaging format, that will let you publish your project directly to the Ubuntu store. From there it will be installable in all the supported Linux distros, with automatic and transactional updates.
You can read more about it in the snapcraft docs.
Available options:
# .goreleaser.yml snapcraft: # You can change the name of the package. # Default: `{{ .ProjectName }}_{{ .</description>
    </item>
    
    <item>
      <title>Homebrew</title>
      <link>https://goreleaser.com/homebrew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/homebrew/</guid>
      <description>After releasing to GitHub, GoReleaser can generate and publish a homebrew-tap recipe into a repository that you have access to.
The brew section specifies how the formula should be created. You can check the Homebrew documentation and the formula cookbook for more details.
# .goreleaser.yml brew: # Name template of the recipe # Default to project name name: myproject # Reporitory to push the tap to. github: owner: user name: homebrew-tap # Template for the url.</description>
    </item>
    
    <item>
      <title>Scoop</title>
      <link>https://goreleaser.com/scoop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/scoop/</guid>
      <description>After releasing to GitHub, GoReleaser can generate and publish a Scoop App Manifest into a repository that you have access to.
The scoop section specifies how the manifest should be created. See the commented example bellow:
# .goreleaser.yml scoop: # Template for the url. # Default is &amp;#34;https://github.com/&amp;lt;repo_owner&amp;gt;/&amp;lt;repo_name&amp;gt;/releases/download/{{ .Tag }}/{{ .ArtifactName }}&amp;#34; url_template: &amp;#34;http://github.mycompany.com/foo/bar/releases/{{ .Tag }}/{{ .ArtifactName }}&amp;#34; # Repository to push the app manifest to. bucket: owner: user name: scoop-bucket # Git author used to commit to the repository.</description>
    </item>
    
    <item>
      <title>Release</title>
      <link>https://goreleaser.com/release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/release/</guid>
      <description>GoReleaser will create a GitHub release with the current tag, upload all the artifacts and generate the changelog based on the new commits since the previous tag.
Let&amp;rsquo;s see what can be customized in the release section:
# .goreleaser.yml release: # Repo in which the release will be created. # Default is extracted from the origin remote URL. github: owner: user name: repo # If set to true, will not auto-publish the release.</description>
    </item>
    
    <item>
      <title>S3</title>
      <link>https://goreleaser.com/s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/s3/</guid>
      <description>Since v0.74.0, GoReleaser supports pushing artifacts to Amazon S3 and other API-compatible block storages (minio for example).
Right now, the implementation is quite simple and probably won&amp;rsquo;t cover all use cases. If you need one of such use cases, please open an issue/pull request.
Customization # .goreleaser.yml s3: # You can have multiple s3 configs - # Bucket name (without the s3:// prefix) # Default is empty. bucket: my-bucket # AWS Region to use.</description>
    </item>
    
    <item>
      <title>Artifactory</title>
      <link>https://goreleaser.com/artifactory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/artifactory/</guid>
      <description>Since v0.38.0, GoReleaser supports building and pushing artifacts into Artifactory.
How it works You can declare multiple Artifactory instances. All binaries generated by your builds section will be pushed to each configured Artifactory.
If you have only one Artifactory instance, the configuration is as easy as adding the upload target and a username to your .goreleaser.yml file:
artifactories: - name: production target: http://&amp;lt;Your-Instance&amp;gt;:8081/artifactory/example-repo-local/{{ .ProjectName }}/{{ .Version }}/ username: goreleaser Prerequisites:</description>
    </item>
    
    <item>
      <title>HTTP Put</title>
      <link>https://goreleaser.com/put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/put/</guid>
      <description>Since vX.Y.Z, GoReleaser supports building and pushing artifacts to HTTP servers using simple HTTP PUT requests.
How it works You can declare multiple Put instances. All binaries generated by your builds section will be pushed to each configured Put.
If you have only one Put instance, the configuration is as easy as adding the upload target and a username to your .goreleaser.yml file:
puts: - name: production target: http://some.server/some/path/example-repo-local/{{ .</description>
    </item>
    
    <item>
      <title>Continuous Integration</title>
      <link>https://goreleaser.com/ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/ci/</guid>
      <description>GoReleaser was built from the very first commit with the idea of running it as part of the CI pipeline in mind.
Let&amp;rsquo;s see how we can get it working on popular CI softwares.
Travis You may want to setup your project to auto-deploy your new tags on Travis, for example:
# .travis.yml language: go addons: apt: packages: # needed for the nfpm pipe: - rpm # needed for the snap pipe: - snapcraft env: # needed for the snap pipe: - PATH=/snap/bin:$PATH install: # needed for the snap pipe: - sudo snap install snapcraft --classic # needed for the docker pipe services: - docker after_success: # docker login is required if you want to push docker images.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://goreleaser.com/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/docker/</guid>
      <description>Since v0.31.0, GoReleaser supports building and pushing Docker images.
How it works You can declare multiple Docker images. They will be matched against the binaries generated by your builds section.
If you have only one build setup, the configuration is as easy as adding the name of your image to your .goreleaser.yml file:
dockers: - image: user/repo You also need to create a Dockerfile in your project&amp;rsquo;s root folder:</description>
    </item>
    
    <item>
      <title>Deprecation notices</title>
      <link>https://goreleaser.com/deprecations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/deprecations/</guid>
      <description>This page will be used to list deprecation notices accross GoReleaser.
Deprecate code will be removed after ~6 months from the time it was deprecated.
Active deprecation notices No active deprecation notices at this time.
since yyyy-mm-dd Description. Change this: ```yaml ``` to this: ```yaml ``` -- Expired deprecation notices The following options were deprecated for ~6 months and are now unsupported.
fpm  since 2018-02-17
removed 2017-08-15
 FPM is deprecated in favor of nfpm, which is a simpler alternative written in Go.</description>
    </item>
    
    <item>
      <title>Sponsors</title>
      <link>https://goreleaser.com/sponsors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/sponsors/</guid>
      <description>Does your company use goreleaser? Help keep the project bug-free and feature rich by sponsoring the project.
    
Backers Love our work and community? Become a backer.</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://goreleaser.com/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goreleaser.com/links/</guid>
      <description>Follow the progress on the GitHub repository Follow @goreleaser on Twitter for updates Chat on Slack to chat about GoReleaser, questions, etc. Join using this link Contributing Guidelines  This project adheres to the Contributor Covenant code of conduct. By participating, you are expected to uphold this code.</description>
    </item>
    
  </channel>
</rss>